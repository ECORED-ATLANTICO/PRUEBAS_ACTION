{"remainingRequest":"/home/runner/work/PRUEBAS_ACTION/PRUEBAS_ACTION/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/PRUEBAS_ACTION/PRUEBAS_ACTION/src/views/Tema1.vue?vue&type=template&id=0ff633ec&lang=pug","dependencies":[{"path":"/home/runner/work/PRUEBAS_ACTION/PRUEBAS_ACTION/src/views/Tema1.vue","mtime":1739117861945},{"path":"/home/runner/work/PRUEBAS_ACTION/PRUEBAS_ACTION/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/PRUEBAS_ACTION/PRUEBAS_ACTION/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/PRUEBAS_ACTION/PRUEBAS_ACTION/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/PRUEBAS_ACTION/PRUEBAS_ACTION/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/PRUEBAS_ACTION/PRUEBAS_ACTION/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/PRUEBAS_ACTION/PRUEBAS_ACTION/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/PRUEBAS_ACTION/PRUEBAS_ACTION/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}